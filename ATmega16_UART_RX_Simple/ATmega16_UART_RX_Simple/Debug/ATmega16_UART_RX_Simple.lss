
ATmega16_UART_RX_Simple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000062d  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ad  00000000  00000000  000008ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000021f  00000000  00000000  00000e5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000316  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000068  00000000  00000000  000013e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000144e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_init>:

volatile unsigned char data;

void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << RXCIE);   /* Turn on the transmission and reception */
  7c:	2a b1       	in	r18, 0x0a	; 10
  7e:	20 69       	ori	r18, 0x90	; 144
  80:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1); /* Use 8-bit character sizes */
  82:	20 b5       	in	r18, 0x20	; 32
  84:	26 68       	ori	r18, 0x86	; 134
  86:	20 bd       	out	0x20, r18	; 32

	UBRRL = BAUD_PRESCALE; 					/* Load lower 8-bits of the baud rate value */
  88:	dc 01       	movw	r26, r24
  8a:	cb 01       	movw	r24, r22
  8c:	88 0f       	add	r24, r24
  8e:	99 1f       	adc	r25, r25
  90:	aa 1f       	adc	r26, r26
  92:	bb 1f       	adc	r27, r27
  94:	88 0f       	add	r24, r24
  96:	99 1f       	adc	r25, r25
  98:	aa 1f       	adc	r26, r26
  9a:	bb 1f       	adc	r27, r27
  9c:	9c 01       	movw	r18, r24
  9e:	ad 01       	movw	r20, r26
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	44 1f       	adc	r20, r20
  a6:	55 1f       	adc	r21, r21
  a8:	22 0f       	add	r18, r18
  aa:	33 1f       	adc	r19, r19
  ac:	44 1f       	adc	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	72 e1       	ldi	r23, 0x12	; 18
  b4:	8a e7       	ldi	r24, 0x7A	; 122
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 93 00 	call	0x126	; 0x126 <__udivmodsi4>
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	82 0f       	add	r24, r18
  c0:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);			/*Load upper 8-bits*/
  c2:	da 01       	movw	r26, r20
  c4:	c9 01       	movw	r24, r18
  c6:	01 97       	sbiw	r24, 0x01	; 1
  c8:	a1 09       	sbc	r26, r1
  ca:	b1 09       	sbc	r27, r1
  cc:	89 2f       	mov	r24, r25
  ce:	9a 2f       	mov	r25, r26
  d0:	ab 2f       	mov	r26, r27
  d2:	bb 27       	eor	r27, r27
  d4:	80 bd       	out	0x20, r24	; 32
  d6:	08 95       	ret

000000d8 <__vector_11>:
}

ISR(USART_RXC_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	8f 93       	push	r24
	data=UDR;
  e4:	8c b1       	in	r24, 0x0c	; 12
  e6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  ea:	8f 91       	pop	r24
  ec:	0f 90       	pop	r0
  ee:	0f be       	out	0x3f, r0	; 63
  f0:	0f 90       	pop	r0
  f2:	1f 90       	pop	r1
  f4:	18 95       	reti

000000f6 <main>:

int main()
{
	UART_init(9600);
  f6:	60 e8       	ldi	r22, 0x80	; 128
  f8:	75 e2       	ldi	r23, 0x25	; 37
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 3e 00 	call	0x7c	; 0x7c <UART_init>
	sei();
 102:	78 94       	sei
	DDRB=0xFF;
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	87 bb       	out	0x17, r24	; 23
	
	while(1)
	{
		if(data =='a'){
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	81 36       	cpi	r24, 0x61	; 97
 10e:	19 f4       	brne	.+6      	; 0x116 <main+0x20>
			PORTB |=(1<<0);
 110:	88 b3       	in	r24, 0x18	; 24
 112:	81 60       	ori	r24, 0x01	; 1
 114:	88 bb       	out	0x18, r24	; 24
		}
		if(data =='b'){
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	82 36       	cpi	r24, 0x62	; 98
 11c:	a9 f7       	brne	.-22     	; 0x108 <main+0x12>
			PORTB &=(~(1<<0));
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8e 7f       	andi	r24, 0xFE	; 254
 122:	88 bb       	out	0x18, r24	; 24
 124:	f1 cf       	rjmp	.-30     	; 0x108 <main+0x12>

00000126 <__udivmodsi4>:
 126:	a1 e2       	ldi	r26, 0x21	; 33
 128:	1a 2e       	mov	r1, r26
 12a:	aa 1b       	sub	r26, r26
 12c:	bb 1b       	sub	r27, r27
 12e:	fd 01       	movw	r30, r26
 130:	0d c0       	rjmp	.+26     	; 0x14c <__udivmodsi4_ep>

00000132 <__udivmodsi4_loop>:
 132:	aa 1f       	adc	r26, r26
 134:	bb 1f       	adc	r27, r27
 136:	ee 1f       	adc	r30, r30
 138:	ff 1f       	adc	r31, r31
 13a:	a2 17       	cp	r26, r18
 13c:	b3 07       	cpc	r27, r19
 13e:	e4 07       	cpc	r30, r20
 140:	f5 07       	cpc	r31, r21
 142:	20 f0       	brcs	.+8      	; 0x14c <__udivmodsi4_ep>
 144:	a2 1b       	sub	r26, r18
 146:	b3 0b       	sbc	r27, r19
 148:	e4 0b       	sbc	r30, r20
 14a:	f5 0b       	sbc	r31, r21

0000014c <__udivmodsi4_ep>:
 14c:	66 1f       	adc	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	88 1f       	adc	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	1a 94       	dec	r1
 156:	69 f7       	brne	.-38     	; 0x132 <__udivmodsi4_loop>
 158:	60 95       	com	r22
 15a:	70 95       	com	r23
 15c:	80 95       	com	r24
 15e:	90 95       	com	r25
 160:	9b 01       	movw	r18, r22
 162:	ac 01       	movw	r20, r24
 164:	bd 01       	movw	r22, r26
 166:	cf 01       	movw	r24, r30
 168:	08 95       	ret

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
