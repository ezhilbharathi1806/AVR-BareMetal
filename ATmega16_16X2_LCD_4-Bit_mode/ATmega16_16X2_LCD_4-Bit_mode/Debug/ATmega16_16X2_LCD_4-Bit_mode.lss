
ATmega16_16X2_LCD_4-Bit_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001b8  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000890  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000389  00000000  00000000  000011e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001570  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  000015e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b1  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 eb       	ldi	r30, 0xB8	; 184
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  7a:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
void lcd_data(unsigned char);
void lcd_string(unsigned char *);
void lcd_init();

void lcd_cmd(unsigned char c){
	data_pins = (c&0xF0);   //upper nibble 
  82:	98 2f       	mov	r25, r24
  84:	90 7f       	andi	r25, 0xF0	; 240
  86:	92 bb       	out	0x12, r25	; 18
	control_pins &=~(1<<RS); //RS =0
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	9e 7f       	andi	r25, 0xFE	; 254
  8c:	92 bb       	out	0x12, r25	; 18
	control_pins &=~(1<<RW); // RW = 0
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	9d 7f       	andi	r25, 0xFD	; 253
  92:	92 bb       	out	0x12, r25	; 18
	control_pins |=(1<<E);   // E = 1
  94:	92 b3       	in	r25, 0x12	; 18
  96:	94 60       	ori	r25, 0x04	; 4
  98:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	e3 ec       	ldi	r30, 0xC3	; 195
  9c:	f9 e0       	ldi	r31, 0x09	; 9
  9e:	31 97       	sbiw	r30, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <lcd_cmd+0x1c>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <lcd_cmd+0x22>
  a4:	00 00       	nop
	_delay_ms(10);
	control_pins &=~(1<<E);  //E = 0
  a6:	92 b3       	in	r25, 0x12	; 18
  a8:	9b 7f       	andi	r25, 0xFB	; 251
  aa:	92 bb       	out	0x12, r25	; 18
	
	data_pins = ((c<<4)&0xF0);   //lower nibble 
  ac:	f0 e1       	ldi	r31, 0x10	; 16
  ae:	8f 9f       	mul	r24, r31
  b0:	c0 01       	movw	r24, r0
  b2:	11 24       	eor	r1, r1
  b4:	82 bb       	out	0x12, r24	; 18
	control_pins &=~(1<<RS); //RS =0
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	8e 7f       	andi	r24, 0xFE	; 254
  ba:	82 bb       	out	0x12, r24	; 18
	control_pins &=~(1<<RW); // RW = 0
  bc:	82 b3       	in	r24, 0x12	; 18
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	82 bb       	out	0x12, r24	; 18
	control_pins |=(1<<E);   // E = 1
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	83 ec       	ldi	r24, 0xC3	; 195
  ca:	99 e0       	ldi	r25, 0x09	; 9
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_cmd+0x4a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_cmd+0x50>
  d2:	00 00       	nop
	_delay_ms(10);
	control_pins &=~(1<<E);  //E = 0
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8b 7f       	andi	r24, 0xFB	; 251
  d8:	82 bb       	out	0x12, r24	; 18
  da:	08 95       	ret

000000dc <lcd_data>:
}

void lcd_data(unsigned char d){
	data_pins = (d&0xF0);   //upper nibble 
  dc:	98 2f       	mov	r25, r24
  de:	90 7f       	andi	r25, 0xF0	; 240
  e0:	92 bb       	out	0x12, r25	; 18
	control_pins |=(1<<RS); //RS =1
  e2:	92 b3       	in	r25, 0x12	; 18
  e4:	91 60       	ori	r25, 0x01	; 1
  e6:	92 bb       	out	0x12, r25	; 18
	control_pins &=~(1<<RW); // RW = 0
  e8:	92 b3       	in	r25, 0x12	; 18
  ea:	9d 7f       	andi	r25, 0xFD	; 253
  ec:	92 bb       	out	0x12, r25	; 18
	control_pins |=(1<<E);   // E = 1
  ee:	92 b3       	in	r25, 0x12	; 18
  f0:	94 60       	ori	r25, 0x04	; 4
  f2:	92 bb       	out	0x12, r25	; 18
  f4:	e3 ec       	ldi	r30, 0xC3	; 195
  f6:	f9 e0       	ldi	r31, 0x09	; 9
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0x1c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_data+0x22>
  fe:	00 00       	nop
	_delay_ms(10);
	control_pins &=~(1<<E);  //E = 0
 100:	92 b3       	in	r25, 0x12	; 18
 102:	9b 7f       	andi	r25, 0xFB	; 251
 104:	92 bb       	out	0x12, r25	; 18
	
	data_pins = ((d<<4)&0xF0);   //lower nibble
 106:	f0 e1       	ldi	r31, 0x10	; 16
 108:	8f 9f       	mul	r24, r31
 10a:	c0 01       	movw	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	82 bb       	out	0x12, r24	; 18
	control_pins |=(1<<RS); //RS =1
 110:	82 b3       	in	r24, 0x12	; 18
 112:	81 60       	ori	r24, 0x01	; 1
 114:	82 bb       	out	0x12, r24	; 18
	control_pins &=~(1<<RW); // RW = 0
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	82 bb       	out	0x12, r24	; 18
	control_pins |=(1<<E);   // E = 1
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	84 60       	ori	r24, 0x04	; 4
 120:	82 bb       	out	0x12, r24	; 18
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_data+0x4a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_data+0x50>
 12c:	00 00       	nop
	_delay_ms(10);
	control_pins &=~(1<<E);  //E = 0
 12e:	82 b3       	in	r24, 0x12	; 18
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	82 bb       	out	0x12, r24	; 18
 134:	08 95       	ret

00000136 <lcd_string>:
}

void lcd_string(unsigned char *s){
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	ec 01       	movw	r28, r24
	while(*s!=0){
 13c:	03 c0       	rjmp	.+6      	; 0x144 <lcd_string+0xe>
		lcd_data(*s);
 13e:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_data>
		s++;
 142:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(10);
	control_pins &=~(1<<E);  //E = 0
}

void lcd_string(unsigned char *s){
	while(*s!=0){
 144:	88 81       	ld	r24, Y
 146:	81 11       	cpse	r24, r1
 148:	fa cf       	rjmp	.-12     	; 0x13e <lcd_string+0x8>
		lcd_data(*s);
		s++;
	}
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <lcd_init>:

void lcd_init(){
	
	lcd_cmd(0x33);
 150:	83 e3       	ldi	r24, 0x33	; 51
 152:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x32);
 156:	82 e3       	ldi	r24, 0x32	; 50
 158:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x28);
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06);
 162:	86 e0       	ldi	r24, 0x06	; 6
 164:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0C);
 168:	8c e0       	ldi	r24, 0x0C	; 12
 16a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x01);
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 174:	08 95       	ret

00000176 <main>:
}
int main(void)
{
    /* Replace with your application code */
	DDRD = 0xF0; //set Port D as output
 176:	80 ef       	ldi	r24, 0xF0	; 240
 178:	81 bb       	out	0x11, r24	; 17
	DDRD |= (1<<RS)|(1<<RW)|(1<<E);  //set port C pin 0, 1, 2 as output pins
 17a:	81 b3       	in	r24, 0x11	; 17
 17c:	87 60       	ori	r24, 0x07	; 7
 17e:	81 bb       	out	0x11, r24	; 17
	
	lcd_init();
 180:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_init>
    while (1) 
    {
		lcd_cmd(0x80);
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		lcd_string("EZHIL BHARATHI");
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_string>
		lcd_cmd(0xC0);
 192:	80 ec       	ldi	r24, 0xC0	; 192
 194:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		lcd_string("Embedded Dev");
 198:	8f e6       	ldi	r24, 0x6F	; 111
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_string>
 1a0:	2f e3       	ldi	r18, 0x3F	; 63
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	21 50       	subi	r18, 0x01	; 1
 1a8:	80 40       	sbci	r24, 0x00	; 0
 1aa:	90 40       	sbci	r25, 0x00	; 0
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x30>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x3a>
 1b0:	00 00       	nop
 1b2:	e8 cf       	rjmp	.-48     	; 0x184 <main+0xe>

000001b4 <_exit>:
 1b4:	f8 94       	cli

000001b6 <__stop_program>:
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <__stop_program>
