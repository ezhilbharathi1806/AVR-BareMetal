
ATmega16_SevenSegment_FourDigit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001fa  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007be  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000652  00000000  00000000  00000aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000338  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000377  00000000  00000000  000014cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000305  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  7a:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <display_FourDigit_number>:
		
    }
	
}

void display_FourDigit_number(uint32_t num){
  82:	4f 92       	push	r4
  84:	5f 92       	push	r5
  86:	6f 92       	push	r6
  88:	7f 92       	push	r7
  8a:	8f 92       	push	r8
  8c:	9f 92       	push	r9
  8e:	af 92       	push	r10
  90:	bf 92       	push	r11
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	cf 93       	push	r28
  9c:	2b 01       	movw	r4, r22
  9e:	3c 01       	movw	r6, r24
	for(uint8_t i=0; i<=100;i++){
  a0:	c0 e0       	ldi	r28, 0x00	; 0
  a2:	66 c0       	rjmp	.+204    	; 0x170 <display_FourDigit_number+0xee>
		uint32_t temp;
		
		// extract digit-1
		temp = num;
		temp = (uint32_t)temp/1000;
  a4:	c3 01       	movw	r24, r6
  a6:	b2 01       	movw	r22, r4
  a8:	28 ee       	ldi	r18, 0xE8	; 232
  aa:	33 e0       	ldi	r19, 0x03	; 3
  ac:	40 e0       	ldi	r20, 0x00	; 0
  ae:	50 e0       	ldi	r21, 0x00	; 0
  b0:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__udivmodsi4>
		temp = temp%10;
  b4:	0f 2e       	mov	r0, r31
  b6:	fa e0       	ldi	r31, 0x0A	; 10
  b8:	cf 2e       	mov	r12, r31
  ba:	d1 2c       	mov	r13, r1
  bc:	e1 2c       	mov	r14, r1
  be:	f1 2c       	mov	r15, r1
  c0:	f0 2d       	mov	r31, r0
  c2:	ca 01       	movw	r24, r20
  c4:	b9 01       	movw	r22, r18
  c6:	a7 01       	movw	r20, r14
  c8:	96 01       	movw	r18, r12
  ca:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__udivmodsi4>
		Seven_Segment_Digits = digit_1;
  ce:	2e ef       	ldi	r18, 0xFE	; 254
  d0:	2b bb       	out	0x1b, r18	; 27
		Seven_Segment_Data = seg_code[temp];
  d2:	fb 01       	movw	r30, r22
  d4:	e0 5a       	subi	r30, 0xA0	; 160
  d6:	ff 4f       	sbci	r31, 0xFF	; 255
  d8:	80 81       	ld	r24, Z
  da:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <display_FourDigit_number+0x5e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <display_FourDigit_number+0x64>
  e6:	00 00       	nop
		_delay_ms(1);
		
		// extract digit-2
		temp = num;
		temp = (uint32_t)temp/100;
  e8:	c3 01       	movw	r24, r6
  ea:	b2 01       	movw	r22, r4
  ec:	24 e6       	ldi	r18, 0x64	; 100
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	50 e0       	ldi	r21, 0x00	; 0
  f4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__udivmodsi4>
		temp = temp%10;
  f8:	ca 01       	movw	r24, r20
  fa:	b9 01       	movw	r22, r18
  fc:	a7 01       	movw	r20, r14
  fe:	96 01       	movw	r18, r12
 100:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__udivmodsi4>
		Seven_Segment_Digits = digit_2;
 104:	2d ef       	ldi	r18, 0xFD	; 253
 106:	2b bb       	out	0x1b, r18	; 27
		Seven_Segment_Data = seg_code[temp];
 108:	fb 01       	movw	r30, r22
 10a:	e0 5a       	subi	r30, 0xA0	; 160
 10c:	ff 4f       	sbci	r31, 0xFF	; 255
 10e:	80 81       	ld	r24, Z
 110:	88 bb       	out	0x18, r24	; 24
 112:	89 ef       	ldi	r24, 0xF9	; 249
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <display_FourDigit_number+0x94>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <display_FourDigit_number+0x9a>
 11c:	00 00       	nop
		_delay_ms(1);
		
		// extract digit-3
		temp = num;
		temp = (uint32_t)temp/10;
 11e:	c3 01       	movw	r24, r6
 120:	b2 01       	movw	r22, r4
 122:	a7 01       	movw	r20, r14
 124:	96 01       	movw	r18, r12
 126:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__udivmodsi4>
 12a:	4b 01       	movw	r8, r22
 12c:	5c 01       	movw	r10, r24
		temp = temp%10;
 12e:	ca 01       	movw	r24, r20
 130:	b9 01       	movw	r22, r18
 132:	a7 01       	movw	r20, r14
 134:	96 01       	movw	r18, r12
 136:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__udivmodsi4>
		Seven_Segment_Digits = digit_3;
 13a:	2b ef       	ldi	r18, 0xFB	; 251
 13c:	2b bb       	out	0x1b, r18	; 27
		Seven_Segment_Data = seg_code[temp];
 13e:	fb 01       	movw	r30, r22
 140:	e0 5a       	subi	r30, 0xA0	; 160
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	80 81       	ld	r24, Z
 146:	88 bb       	out	0x18, r24	; 24
 148:	89 ef       	ldi	r24, 0xF9	; 249
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <display_FourDigit_number+0xca>
 150:	00 c0       	rjmp	.+0      	; 0x152 <display_FourDigit_number+0xd0>
 152:	00 00       	nop
		
		// extract digit-4
		temp = num;
		//temp = temp/1000;
		temp = temp%10;
		Seven_Segment_Digits = digit_4;
 154:	87 ef       	ldi	r24, 0xF7	; 247
 156:	8b bb       	out	0x1b, r24	; 27
		Seven_Segment_Data = seg_code[temp];
 158:	f4 01       	movw	r30, r8
 15a:	e0 5a       	subi	r30, 0xA0	; 160
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	80 81       	ld	r24, Z
 160:	88 bb       	out	0x18, r24	; 24
 162:	89 ef       	ldi	r24, 0xF9	; 249
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <display_FourDigit_number+0xe4>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <display_FourDigit_number+0xea>
 16c:	00 00       	nop
    }
	
}

void display_FourDigit_number(uint32_t num){
	for(uint8_t i=0; i<=100;i++){
 16e:	cf 5f       	subi	r28, 0xFF	; 255
 170:	c5 36       	cpi	r28, 0x65	; 101
 172:	08 f4       	brcc	.+2      	; 0x176 <display_FourDigit_number+0xf4>
 174:	97 cf       	rjmp	.-210    	; 0xa4 <display_FourDigit_number+0x22>
		temp = temp%10;
		Seven_Segment_Digits = digit_4;
		Seven_Segment_Data = seg_code[temp];
		_delay_ms(1);
	}
 176:	cf 91       	pop	r28
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	bf 90       	pop	r11
 182:	af 90       	pop	r10
 184:	9f 90       	pop	r9
 186:	8f 90       	pop	r8
 188:	7f 90       	pop	r7
 18a:	6f 90       	pop	r6
 18c:	5f 90       	pop	r5
 18e:	4f 90       	pop	r4
 190:	08 95       	ret

00000192 <main>:

 uint8_t seg_code[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};

int main(void)
{
	DDRA = 0xFF;
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
 196:	87 bb       	out	0x17, r24	; 23
	
	//uint32_t num;
	
    while (1) 
    {
		display_FourDigit_number(1234);
 198:	62 ed       	ldi	r22, 0xD2	; 210
 19a:	74 e0       	ldi	r23, 0x04	; 4
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 41 00 	call	0x82	; 0x82 <display_FourDigit_number>
 1a4:	83 ec       	ldi	r24, 0xC3	; 195
 1a6:	99 e0       	ldi	r25, 0x09	; 9
 1a8:	01 97       	sbiw	r24, 0x01	; 1
 1aa:	f1 f7       	brne	.-4      	; 0x1a8 <main+0x16>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x1c>
 1ae:	00 00       	nop
 1b0:	f3 cf       	rjmp	.-26     	; 0x198 <main+0x6>

000001b2 <__udivmodsi4>:
 1b2:	a1 e2       	ldi	r26, 0x21	; 33
 1b4:	1a 2e       	mov	r1, r26
 1b6:	aa 1b       	sub	r26, r26
 1b8:	bb 1b       	sub	r27, r27
 1ba:	fd 01       	movw	r30, r26
 1bc:	0d c0       	rjmp	.+26     	; 0x1d8 <__udivmodsi4_ep>

000001be <__udivmodsi4_loop>:
 1be:	aa 1f       	adc	r26, r26
 1c0:	bb 1f       	adc	r27, r27
 1c2:	ee 1f       	adc	r30, r30
 1c4:	ff 1f       	adc	r31, r31
 1c6:	a2 17       	cp	r26, r18
 1c8:	b3 07       	cpc	r27, r19
 1ca:	e4 07       	cpc	r30, r20
 1cc:	f5 07       	cpc	r31, r21
 1ce:	20 f0       	brcs	.+8      	; 0x1d8 <__udivmodsi4_ep>
 1d0:	a2 1b       	sub	r26, r18
 1d2:	b3 0b       	sbc	r27, r19
 1d4:	e4 0b       	sbc	r30, r20
 1d6:	f5 0b       	sbc	r31, r21

000001d8 <__udivmodsi4_ep>:
 1d8:	66 1f       	adc	r22, r22
 1da:	77 1f       	adc	r23, r23
 1dc:	88 1f       	adc	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	1a 94       	dec	r1
 1e2:	69 f7       	brne	.-38     	; 0x1be <__udivmodsi4_loop>
 1e4:	60 95       	com	r22
 1e6:	70 95       	com	r23
 1e8:	80 95       	com	r24
 1ea:	90 95       	com	r25
 1ec:	9b 01       	movw	r18, r22
 1ee:	ac 01       	movw	r20, r24
 1f0:	bd 01       	movw	r22, r26
 1f2:	cf 01       	movw	r24, r30
 1f4:	08 95       	ret

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
