
ATmega16_Fast_PWM_10BitMode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cd  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000286  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c0  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
    /* Replace with your application code */
	//Set mode of timer
	TCCR1A |= (1<<WGM10)|(1<<WGM11);
  6c:	8f b5       	in	r24, 0x2f	; 47
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=(1<<WGM12);
  72:	8e b5       	in	r24, 0x2e	; 46
  74:	88 60       	ori	r24, 0x08	; 8
  76:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);   // FAst PWM 10-Bit Mode
  78:	8e b5       	in	r24, 0x2e	; 46
  7a:	8f 7e       	andi	r24, 0xEF	; 239
  7c:	8e bd       	out	0x2e, r24	; 46
	
	//Set PWM Mode
	TCCR1A &= ~(1<<COM1A0);
  7e:	8f b5       	in	r24, 0x2f	; 47
  80:	8f 7b       	andi	r24, 0xBF	; 191
  82:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<COM1A1);   //PWM in Non-Inverting Mode
  84:	8f b5       	in	r24, 0x2f	; 47
  86:	80 68       	ori	r24, 0x80	; 128
  88:	8f bd       	out	0x2f, r24	; 47
	
	//Set Prescalar for the Timer
	//16MHz/64 = 250KHz
	TCCR1B |= (1<<CS10)|(1<<CS11);
  8a:	8e b5       	in	r24, 0x2e	; 46
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS12); //prescalar = 64
  90:	8e b5       	in	r24, 0x2e	; 46
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	8e bd       	out	0x2e, r24	; 46
	
	//Configuring OC1A pin As output pin
	DDRD |= (1<<DDD5);
  96:	81 b3       	in	r24, 0x11	; 17
  98:	80 62       	ori	r24, 0x20	; 32
  9a:	81 bb       	out	0x11, r24	; 17
	//Since 10-Bit PWM )to 1023 for Setting duty cycle of PWM
	//OCR1A = 512;  // 50% Duty cycle
    while (1) 
    {
		int i;
		for(i=0;i<1023;i++){
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	09 c0       	rjmp	.+18     	; 0xb4 <main+0x48>
			OCR1A = i;
  a2:	9b bd       	out	0x2b, r25	; 43
  a4:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	e3 ef       	ldi	r30, 0xF3	; 243
  a8:	f1 e0       	ldi	r31, 0x01	; 1
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <main+0x3e>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x44>
  b0:	00 00       	nop
	//Since 10-Bit PWM )to 1023 for Setting duty cycle of PWM
	//OCR1A = 512;  // 50% Duty cycle
    while (1) 
    {
		int i;
		for(i=0;i<1023;i++){
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	f3 e0       	ldi	r31, 0x03	; 3
  b8:	9f 07       	cpc	r25, r31
  ba:	9c f3       	brlt	.-26     	; 0xa2 <main+0x36>
  bc:	2f e3       	ldi	r18, 0x3F	; 63
  be:	8d e0       	ldi	r24, 0x0D	; 13
  c0:	93 e0       	ldi	r25, 0x03	; 3
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x56>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x60>
  cc:	00 00       	nop
  ce:	ef e3       	ldi	r30, 0x3F	; 63
  d0:	fd e0       	ldi	r31, 0x0D	; 13
  d2:	23 e0       	ldi	r18, 0x03	; 3
  d4:	e1 50       	subi	r30, 0x01	; 1
  d6:	f0 40       	sbci	r31, 0x00	; 0
  d8:	20 40       	sbci	r18, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x68>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
  e0:	dd cf       	rjmp	.-70     	; 0x9c <main+0x30>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
