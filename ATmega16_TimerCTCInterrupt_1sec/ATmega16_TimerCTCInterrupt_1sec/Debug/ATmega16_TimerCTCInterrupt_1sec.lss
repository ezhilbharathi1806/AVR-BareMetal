
ATmega16_TimerCTCInterrupt_1sec.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005d7  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  000007a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000221  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00000f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000310  00000000  00000000  00000f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_6>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    //Enable the Global Interrupt Enable bit
	sei();
  6c:	78 94       	sei
	
	//Enable the required Timer Interrupt
	TIMSK |= (1<<OCIE1A);
  6e:	89 b7       	in	r24, 0x39	; 57
  70:	80 61       	ori	r24, 0x10	; 16
  72:	89 bf       	out	0x39, r24	; 57
	
	//Set Mode for Timer
	TCCR1A &= (~(1<<WGM10)) & (~(1<<WGM11));
  74:	8f b5       	in	r24, 0x2f	; 47
  76:	8c 7f       	andi	r24, 0xFC	; 252
  78:	8f bd       	out	0x2f, r24	; 47
	TCCR1B &= ~(1<<WGM13);
  7a:	8e b5       	in	r24, 0x2e	; 46
  7c:	8f 7e       	andi	r24, 0xEF	; 239
  7e:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<WGM12);
  80:	8e b5       	in	r24, 0x2e	; 46
  82:	88 60       	ori	r24, 0x08	; 8
  84:	8e bd       	out	0x2e, r24	; 46
	TCCR1A |=(1<<COM1A0);
  86:	8f b5       	in	r24, 0x2f	; 47
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<COM1A1);
  8c:	8f b5       	in	r24, 0x2f	; 47
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8f bd       	out	0x2f, r24	; 47
		
	//Set the Prescalar for the Timer
	TCCR1B |= (1<<CS12) | (1<<CS10);
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	85 60       	ori	r24, 0x05	; 5
  96:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);  //1024
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	8e bd       	out	0x2e, r24	; 46
	
	//Start the Timer with Initial Value
	TCNT1 = 0;
  9e:	1d bc       	out	0x2d, r1	; 45
  a0:	1c bc       	out	0x2c, r1	; 44
	
	//Load the period for the timer to generate 1 second
	//16000000/1024 = 15625 hz
	//1/15625 = 64us for 1tick
	// For generating 1 second no of ticks required = 1/64us = 15625 ticks required
	OCR1A = 15625;
  a2:	89 e0       	ldi	r24, 0x09	; 9
  a4:	9d e3       	ldi	r25, 0x3D	; 61
  a6:	9b bd       	out	0x2b, r25	; 43
  a8:	8a bd       	out	0x2a, r24	; 42
	
	//Configure port D 5th pin as Output Pin 
	DDRD |=(1<<5);
  aa:	81 b3       	in	r24, 0x11	; 17
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	81 bb       	out	0x11, r24	; 17
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <main+0x44>

000000b2 <__vector_6>:
    while (1) 
    {
    }
}

ISR(TIMER1_COMPA_vect){
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	PORTD ^=(1<<5);
  c0:	92 b3       	in	r25, 0x12	; 18
  c2:	80 e2       	ldi	r24, 0x20	; 32
  c4:	89 27       	eor	r24, r25
  c6:	82 bb       	out	0x12, r24	; 18
	TCNT1 = 0;
  c8:	1d bc       	out	0x2d, r1	; 45
  ca:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 15625;
  cc:	89 e0       	ldi	r24, 0x09	; 9
  ce:	9d e3       	ldi	r25, 0x3D	; 61
  d0:	9b bd       	out	0x2b, r25	; 43
  d2:	8a bd       	out	0x2a, r24	; 42
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
