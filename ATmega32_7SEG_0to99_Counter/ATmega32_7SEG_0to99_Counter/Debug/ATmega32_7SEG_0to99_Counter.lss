
ATmega32_7SEG_0to99_Counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000013c  000001b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006f1  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ce  00000000  00000000  00000939  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002aa  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000151  00000000  00000000  00001515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001666  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 9c 00 	jmp	0x138	; 0x138 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

uint8_t Seg_code[]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};

int main(void)
{
	DDRA = 0xFF;  //port A as input
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	8a bb       	out	0x1a, r24	; 26
	DDRB |=(1<<0)|(1<<1); //PB0, PB1 as output
  86:	87 b3       	in	r24, 0x17	; 23
  88:	83 60       	ori	r24, 0x03	; 3
  8a:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~((1<<2)|(1<<3));  //PB2, PB3 as input
  8c:	87 b3       	in	r24, 0x17	; 23
  8e:	83 7f       	andi	r24, 0xF3	; 243
  90:	87 bb       	out	0x17, r24	; 23
	
	uint8_t num = 12;
  92:	2c e0       	ldi	r18, 0x0C	; 12
    /* Replace with your application code */
    while (1) 
    {
		//Digit -1
		uint8_t temp = num;
		temp/=10;
  94:	ed ec       	ldi	r30, 0xCD	; 205
  96:	2e 9f       	mul	r18, r30
  98:	81 2d       	mov	r24, r1
  9a:	11 24       	eor	r1, r1
  9c:	86 95       	lsr	r24
  9e:	86 95       	lsr	r24
  a0:	86 95       	lsr	r24
		temp = temp%10;
  a2:	8e 9f       	mul	r24, r30
  a4:	e1 2d       	mov	r30, r1
  a6:	11 24       	eor	r1, r1
  a8:	e6 95       	lsr	r30
  aa:	e6 95       	lsr	r30
  ac:	e6 95       	lsr	r30
  ae:	ee 0f       	add	r30, r30
  b0:	9e 2f       	mov	r25, r30
  b2:	99 0f       	add	r25, r25
  b4:	99 0f       	add	r25, r25
  b6:	e9 0f       	add	r30, r25
  b8:	38 2f       	mov	r19, r24
  ba:	3e 1b       	sub	r19, r30
		SevenSeg_Digits =Digit_1;
  bc:	9e ef       	ldi	r25, 0xFE	; 254
  be:	98 bb       	out	0x18, r25	; 24
		SevenSeg_Data = Seg_code[temp];
  c0:	e3 2f       	mov	r30, r19
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	90 81       	ld	r25, Z
  ca:	9b bb       	out	0x1b, r25	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	e3 ec       	ldi	r30, 0xC3	; 195
  ce:	f9 e0       	ldi	r31, 0x09	; 9
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x4e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x54>
  d6:	00 00       	nop
		_delay_ms(10);
		
		//digit - 2
		temp = num;
		temp = temp%10;
  d8:	88 0f       	add	r24, r24
  da:	98 2f       	mov	r25, r24
  dc:	99 0f       	add	r25, r25
  de:	99 0f       	add	r25, r25
  e0:	89 0f       	add	r24, r25
  e2:	e2 2f       	mov	r30, r18
  e4:	e8 1b       	sub	r30, r24
		SevenSeg_Digits =Digit_2;
  e6:	8d ef       	ldi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
		SevenSeg_Data = Seg_code[temp];
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	e0 5a       	subi	r30, 0xA0	; 160
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	80 81       	ld	r24, Z
  f2:	8b bb       	out	0x1b, r24	; 27
  f4:	83 ec       	ldi	r24, 0xC3	; 195
  f6:	99 e0       	ldi	r25, 0x09	; 9
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x76>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7c>
  fe:	00 00       	nop
		_delay_ms(10);
		
		if(PINB & (1<<2) == (1<<2)){
 100:	b0 9b       	sbis	0x16, 0	; 22
 102:	0c c0       	rjmp	.+24     	; 0x11c <main+0x9a>
			// increment
			if(num<=99)
 104:	24 36       	cpi	r18, 0x64	; 100
 106:	08 f4       	brcc	.+2      	; 0x10a <main+0x88>
			num++;
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	9f e3       	ldi	r25, 0x3F	; 63
 10c:	ed e0       	ldi	r30, 0x0D	; 13
 10e:	f3 e0       	ldi	r31, 0x03	; 3
 110:	91 50       	subi	r25, 0x01	; 1
 112:	e0 40       	sbci	r30, 0x00	; 0
 114:	f0 40       	sbci	r31, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x8e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x98>
 11a:	00 00       	nop
			_delay_ms(1000);
		}
		if(PINB & (1<<3) == (1<<3)){
 11c:	b0 9b       	sbis	0x16, 0	; 22
 11e:	ba cf       	rjmp	.-140    	; 0x94 <main+0x12>
			// decrement
			if(num > 0)
 120:	21 11       	cpse	r18, r1
			num--;
 122:	21 50       	subi	r18, 0x01	; 1
 124:	3f e3       	ldi	r19, 0x3F	; 63
 126:	8d e0       	ldi	r24, 0x0D	; 13
 128:	93 e0       	ldi	r25, 0x03	; 3
 12a:	31 50       	subi	r19, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <main+0xa8>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0xb2>
 134:	00 00       	nop
 136:	ae cf       	rjmp	.-164    	; 0x94 <main+0x12>

00000138 <_exit>:
 138:	f8 94       	cli

0000013a <__stop_program>:
 13a:	ff cf       	rjmp	.-2      	; 0x13a <__stop_program>
