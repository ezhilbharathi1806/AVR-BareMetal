
ATmega16_16X2_LCD_8-Bit_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f6  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000328  00000000  00000000  000010d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013d  00000000  00000000  000017d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 83 00 	call	0x106	; 0x106 <main>
  7a:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:
void lcd_data(unsigned char);
void lcd_string(unsigned char *);
void lcd_init();

void lcd_cmd(unsigned char c){
	PORTD = c;
  82:	82 bb       	out	0x12, r24	; 18
	PORTC &=~(1<<RS); //RS =0
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	85 bb       	out	0x15, r24	; 21
	PORTC &=~(1<<RW); // RW = 0
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	85 bb       	out	0x15, r24	; 21
	PORTC |=(1<<E);   // E = 1
  90:	85 b3       	in	r24, 0x15	; 21
  92:	84 60       	ori	r24, 0x04	; 4
  94:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	83 ec       	ldi	r24, 0xC3	; 195
  98:	99 e0       	ldi	r25, 0x09	; 9
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_cmd+0x1e>
  a0:	00 00       	nop
	_delay_ms(10);
	PORTC &=~(1<<E);  //E = 0
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8b 7f       	andi	r24, 0xFB	; 251
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	08 95       	ret

000000aa <lcd_data>:
}

void lcd_data(unsigned char d){
	PORTD = d;
  aa:	82 bb       	out	0x12, r24	; 18
	PORTC |=(1<<RS); //RS =1
  ac:	85 b3       	in	r24, 0x15	; 21
  ae:	81 60       	ori	r24, 0x01	; 1
  b0:	85 bb       	out	0x15, r24	; 21
	PORTC &=~(1<<RW); // RW = 0
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	85 bb       	out	0x15, r24	; 21
	PORTC |=(1<<E);   // E = 1
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	84 60       	ori	r24, 0x04	; 4
  bc:	85 bb       	out	0x15, r24	; 21
  be:	83 ec       	ldi	r24, 0xC3	; 195
  c0:	99 e0       	ldi	r25, 0x09	; 9
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_data+0x18>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_data+0x1e>
  c8:	00 00       	nop
	_delay_ms(10);
	PORTC &=~(1<<E);  //E = 0
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	08 95       	ret

000000d2 <lcd_string>:
}

void lcd_string(unsigned char *s){
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	ec 01       	movw	r28, r24
	while(*s!=0){
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <lcd_string+0xe>
		lcd_data(*s);
  da:	0e 94 55 00 	call	0xaa	; 0xaa <lcd_data>
		s++;
  de:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(10);
	PORTC &=~(1<<E);  //E = 0
}

void lcd_string(unsigned char *s){
	while(*s!=0){
  e0:	88 81       	ld	r24, Y
  e2:	81 11       	cpse	r24, r1
  e4:	fa cf       	rjmp	.-12     	; 0xda <lcd_string+0x8>
		lcd_data(*s);
		s++;
	}
}
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	08 95       	ret

000000ec <lcd_init>:

void lcd_init(){
	lcd_cmd(0x38);
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x06);
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x0C);
  f8:	8c e0       	ldi	r24, 0x0C	; 12
  fa:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_cmd(0x01);
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 104:	08 95       	ret

00000106 <main>:
}
int main(void)
{
    /* Replace with your application code */
	DDRD = 0xFF; //set Port D as output
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	81 bb       	out	0x11, r24	; 17
	DDRC |= (1<<RS)|(1<<RW)|(1<<E);  //set port C pin 0, 1, 2 as output pins
 10a:	84 b3       	in	r24, 0x14	; 20
 10c:	87 60       	ori	r24, 0x07	; 7
 10e:	84 bb       	out	0x14, r24	; 20
	
	lcd_init();
 110:	0e 94 76 00 	call	0xec	; 0xec <lcd_init>
    while (1) 
    {
		lcd_cmd(0x80);
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		lcd_string("EMBEDDED");
 11a:	80 e6       	ldi	r24, 0x60	; 96
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_string>
		lcd_cmd(0xC0);
 122:	80 ec       	ldi	r24, 0xC0	; 192
 124:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
		lcd_string("Systems");
 128:	89 e6       	ldi	r24, 0x69	; 105
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_string>
 130:	2f e3       	ldi	r18, 0x3F	; 63
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <main+0x30>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <main+0x3a>
 140:	00 00       	nop
 142:	e8 cf       	rjmp	.-48     	; 0x114 <main+0xe>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
