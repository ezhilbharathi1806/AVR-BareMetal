
ATmega32_BlinkLed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b2  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000529  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001de  00000000  00000000  00000c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002db  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000117b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//#include <avr/io.h>
#include<stdint.h>


int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t *DDRA = (volatile uint8_t *)0x1A;
	*DDRA |=(1<<0);
  78:	ea e1       	ldi	r30, 0x1A	; 26
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	81 60       	ori	r24, 0x01	; 1
  80:	80 83       	st	Z, r24
	volatile uint8_t *PORTA = (volatile uint8_t *)0x1B;
    /* Replace with your application code */
	*PORTA &=~(1<<0);
  82:	eb e1       	ldi	r30, 0x1B	; 27
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	8e 7f       	andi	r24, 0xFE	; 254
  8a:	80 83       	st	Z, r24
	volatile uint32_t i;
    while (1) 
    {
		*PORTA ^=(1<<0);
  8c:	eb e1       	ldi	r30, 0x1B	; 27
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	90 81       	ld	r25, Z
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	80 83       	st	Z, r24
		for(i=0;i<=100000;i++);
  98:	19 82       	std	Y+1, r1	; 0x01
  9a:	1a 82       	std	Y+2, r1	; 0x02
  9c:	1b 82       	std	Y+3, r1	; 0x03
  9e:	1c 82       	std	Y+4, r1	; 0x04
  a0:	0b c0       	rjmp	.+22     	; 0xb8 <main+0x4c>
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	9a 81       	ldd	r25, Y+2	; 0x02
  a6:	ab 81       	ldd	r26, Y+3	; 0x03
  a8:	bc 81       	ldd	r27, Y+4	; 0x04
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	a1 1d       	adc	r26, r1
  ae:	b1 1d       	adc	r27, r1
  b0:	89 83       	std	Y+1, r24	; 0x01
  b2:	9a 83       	std	Y+2, r25	; 0x02
  b4:	ab 83       	std	Y+3, r26	; 0x03
  b6:	bc 83       	std	Y+4, r27	; 0x04
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	9a 81       	ldd	r25, Y+2	; 0x02
  bc:	ab 81       	ldd	r26, Y+3	; 0x03
  be:	bc 81       	ldd	r27, Y+4	; 0x04
  c0:	81 3a       	cpi	r24, 0xA1	; 161
  c2:	96 48       	sbci	r25, 0x86	; 134
  c4:	a1 40       	sbci	r26, 0x01	; 1
  c6:	b1 05       	cpc	r27, r1
  c8:	60 f3       	brcs	.-40     	; 0xa2 <main+0x36>
  ca:	e0 cf       	rjmp	.-64     	; 0x8c <main+0x20>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
