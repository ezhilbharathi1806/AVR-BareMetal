
ATmega16_ADC-Potentiometer_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006a  0080006a  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000089a  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ea  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038d  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000395  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001db  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  8a:	0c 94 22 01 	jmp	0x244	; 0x244 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd>:
void lcd_data(unsigned char);
void lcd_string(unsigned char *);
void lcd_init();

void lcd_cmd(unsigned char c){
	PORTD = c;
  92:	82 bb       	out	0x12, r24	; 18
	PORTC &=~(1<<RS); //RS =0
  94:	85 b3       	in	r24, 0x15	; 21
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	85 bb       	out	0x15, r24	; 21
	PORTC &=~(1<<RW); // RW = 0
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	85 bb       	out	0x15, r24	; 21
	PORTC |=(1<<E);   // E = 1
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	83 ec       	ldi	r24, 0xC3	; 195
  a8:	99 e0       	ldi	r25, 0x09	; 9
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_cmd+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_cmd+0x1e>
  b0:	00 00       	nop
	_delay_ms(10);
	PORTC &=~(1<<E);  //E = 0
  b2:	85 b3       	in	r24, 0x15	; 21
  b4:	8b 7f       	andi	r24, 0xFB	; 251
  b6:	85 bb       	out	0x15, r24	; 21
  b8:	08 95       	ret

000000ba <lcd_data>:
}

void lcd_data(unsigned char d){
	PORTD = d;
  ba:	82 bb       	out	0x12, r24	; 18
	PORTC |=(1<<RS); //RS =1
  bc:	85 b3       	in	r24, 0x15	; 21
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	85 bb       	out	0x15, r24	; 21
	PORTC &=~(1<<RW); // RW = 0
  c2:	85 b3       	in	r24, 0x15	; 21
  c4:	8d 7f       	andi	r24, 0xFD	; 253
  c6:	85 bb       	out	0x15, r24	; 21
	PORTC |=(1<<E);   // E = 1
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_data+0x18>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_data+0x1e>
  d8:	00 00       	nop
	_delay_ms(10);
	PORTC &=~(1<<E);  //E = 0
  da:	85 b3       	in	r24, 0x15	; 21
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	85 bb       	out	0x15, r24	; 21
  e0:	08 95       	ret

000000e2 <lcd_string>:
}

void lcd_string(unsigned char *s){
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	while(*s!=0){
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <lcd_string+0xe>
		lcd_data(*s);
  ea:	0e 94 5d 00 	call	0xba	; 0xba <lcd_data>
		s++;
  ee:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(10);
	PORTC &=~(1<<E);  //E = 0
}

void lcd_string(unsigned char *s){
	while(*s!=0){
  f0:	88 81       	ld	r24, Y
  f2:	81 11       	cpse	r24, r1
  f4:	fa cf       	rjmp	.-12     	; 0xea <lcd_string+0x8>
		lcd_data(*s);
		s++;
	}
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <lcd_init>:

void lcd_init(){
	lcd_cmd(0x38);
  fc:	88 e3       	ldi	r24, 0x38	; 56
  fe:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x06);
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0C);
 108:	8c e0       	ldi	r24, 0x0C	; 12
 10a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
 114:	08 95       	ret

00000116 <main>:
#define  F_CPU 8000000UL

volatile unsigned int ADC_value;

int main(void)
{
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x6>
 11c:	00 d0       	rcall	.+0      	; 0x11e <main+0x8>
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    /*============== ADC ==============*/
    
    //Enable the Global Interrupt Enable Bit
    sei();
 124:	78 94       	sei
    
    //Set reference to NO AVCC and input to ADC0
    ADMUX = 0x00;
 126:	17 b8       	out	0x07, r1	; 7
    
    //Enable ADC
    ADCSRA |= (1<<ADEN)|(1<<ADIE);
 128:	86 b1       	in	r24, 0x06	; 6
 12a:	88 68       	ori	r24, 0x88	; 136
 12c:	86 b9       	out	0x06, r24	; 6
    
    //Set frequency of ADC Conversion
    ADCSRA |=(1<<ADPS2)|(1<<ADPS1);
 12e:	86 b1       	in	r24, 0x06	; 6
 130:	86 60       	ori	r24, 0x06	; 6
 132:	86 b9       	out	0x06, r24	; 6
    ADCSRA &= ~(1<<ADPS0);
 134:	86 b1       	in	r24, 0x06	; 6
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	86 b9       	out	0x06, r24	; 6
    
    
/*  LCD 16x2  */
    DDRD = 0xFF; //set Port D as output
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	81 bb       	out	0x11, r24	; 17
    DDRC |= (1<<RS)|(1<<RW)|(1<<E);  //set port C pin 0, 1, 2 as output pins
 13e:	84 b3       	in	r24, 0x14	; 20
 140:	87 60       	ori	r24, 0x07	; 7
 142:	84 bb       	out	0x14, r24	; 20
    
    lcd_init();
 144:	0e 94 7e 00 	call	0xfc	; 0xfc <lcd_init>
	unsigned char String[5];
	
    while (1)
    {
		//Start ADC conversion
		ADCSRA |=(1<<ADSC);
 148:	86 b1       	in	r24, 0x06	; 6
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	86 b9       	out	0x06, r24	; 6
		
		itoa(ADC_value,String,10);
 14e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 152:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <__data_end+0x1>
 156:	4a e0       	ldi	r20, 0x0A	; 10
 158:	50 e0       	ldi	r21, 0x00	; 0
 15a:	be 01       	movw	r22, r28
 15c:	6f 5f       	subi	r22, 0xFF	; 255
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <itoa>
	    lcd_cmd(0x80);
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_string("ADC Value");
 16a:	80 e6       	ldi	r24, 0x60	; 96
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_string>
		lcd_cmd(0xC0);
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_string(String);
 178:	ce 01       	movw	r24, r28
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	0e 94 71 00 	call	0xe2	; 0xe2 <lcd_string>
 180:	87 ea       	ldi	r24, 0xA7	; 167
 182:	91 e6       	ldi	r25, 0x61	; 97
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x6e>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x74>
 18a:	00 00       	nop
 18c:	dd cf       	rjmp	.-70     	; 0x148 <main+0x32>

0000018e <__vector_14>:
	    
    }
	return 0;
}

ISR(ADC_vect){
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
	ADC_value = (ADCH<<8)+ADCL;  //ADC register contains 10-Bit ADC value
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	98 2f       	mov	r25, r24
 1a4:	88 27       	eor	r24, r24
 1a6:	24 b1       	in	r18, 0x04	; 4
 1a8:	82 0f       	add	r24, r18
 1aa:	91 1d       	adc	r25, r1
 1ac:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
 1b0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	2f 91       	pop	r18
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <itoa>:
 1c4:	45 32       	cpi	r20, 0x25	; 37
 1c6:	51 05       	cpc	r21, r1
 1c8:	20 f4       	brcc	.+8      	; 0x1d2 <itoa+0xe>
 1ca:	42 30       	cpi	r20, 0x02	; 2
 1cc:	10 f0       	brcs	.+4      	; 0x1d2 <itoa+0xe>
 1ce:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__itoa_ncheck>
 1d2:	fb 01       	movw	r30, r22
 1d4:	10 82       	st	Z, r1
 1d6:	cb 01       	movw	r24, r22
 1d8:	08 95       	ret

000001da <__itoa_ncheck>:
 1da:	bb 27       	eor	r27, r27
 1dc:	4a 30       	cpi	r20, 0x0A	; 10
 1de:	31 f4       	brne	.+12     	; 0x1ec <__itoa_ncheck+0x12>
 1e0:	99 23       	and	r25, r25
 1e2:	22 f4       	brpl	.+8      	; 0x1ec <__itoa_ncheck+0x12>
 1e4:	bd e2       	ldi	r27, 0x2D	; 45
 1e6:	90 95       	com	r25
 1e8:	81 95       	neg	r24
 1ea:	9f 4f       	sbci	r25, 0xFF	; 255
 1ec:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__utoa_common>

000001f0 <__utoa_ncheck>:
 1f0:	bb 27       	eor	r27, r27

000001f2 <__utoa_common>:
 1f2:	fb 01       	movw	r30, r22
 1f4:	55 27       	eor	r21, r21
 1f6:	aa 27       	eor	r26, r26
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	aa 1f       	adc	r26, r26
 1fe:	a4 17       	cp	r26, r20
 200:	10 f0       	brcs	.+4      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 202:	a4 1b       	sub	r26, r20
 204:	83 95       	inc	r24
 206:	50 51       	subi	r21, 0x10	; 16
 208:	b9 f7       	brne	.-18     	; 0x1f8 <__utoa_common+0x6>
 20a:	a0 5d       	subi	r26, 0xD0	; 208
 20c:	aa 33       	cpi	r26, 0x3A	; 58
 20e:	08 f0       	brcs	.+2      	; 0x212 <__EEPROM_REGION_LENGTH__+0x12>
 210:	a9 5d       	subi	r26, 0xD9	; 217
 212:	a1 93       	st	Z+, r26
 214:	00 97       	sbiw	r24, 0x00	; 0
 216:	79 f7       	brne	.-34     	; 0x1f6 <__utoa_common+0x4>
 218:	b1 11       	cpse	r27, r1
 21a:	b1 93       	st	Z+, r27
 21c:	11 92       	st	Z+, r1
 21e:	cb 01       	movw	r24, r22
 220:	0c 94 12 01 	jmp	0x224	; 0x224 <strrev>

00000224 <strrev>:
 224:	dc 01       	movw	r26, r24
 226:	fc 01       	movw	r30, r24
 228:	67 2f       	mov	r22, r23
 22a:	71 91       	ld	r23, Z+
 22c:	77 23       	and	r23, r23
 22e:	e1 f7       	brne	.-8      	; 0x228 <strrev+0x4>
 230:	32 97       	sbiw	r30, 0x02	; 2
 232:	04 c0       	rjmp	.+8      	; 0x23c <strrev+0x18>
 234:	7c 91       	ld	r23, X
 236:	6d 93       	st	X+, r22
 238:	70 83       	st	Z, r23
 23a:	62 91       	ld	r22, -Z
 23c:	ae 17       	cp	r26, r30
 23e:	bf 07       	cpc	r27, r31
 240:	c8 f3       	brcs	.-14     	; 0x234 <strrev+0x10>
 242:	08 95       	ret

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
