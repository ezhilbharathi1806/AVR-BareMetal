
ATmega16_ADC_UART_simple.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000001d0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000895  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000365  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001648  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010e  00000000  00000000  00001a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001ba2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  7a:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
	UDR = ch ;
}
uint8_t UART_RX(){
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
	return(UDR);			/* Return the byte*/
}
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	8a bb       	out	0x1a, r24	; 26
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	87 e8       	ldi	r24, 0x87	; 135
  8e:	86 b9       	out	0x06, r24	; 6
  90:	08 95       	ret

00000092 <ADC_read>:
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 7f       	andi	r24, 0xF0	; 240
  96:	87 b9       	out	0x07, r24	; 7
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	86 b9       	out	0x06, r24	; 6
  9e:	34 9b       	sbis	0x06, 4	; 6
  a0:	fe cf       	rjmp	.-4      	; 0x9e <ADC_read+0xc>
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	8a 95       	dec	r24
  a6:	f1 f7       	brne	.-4      	; 0xa4 <ADC_read+0x12>
  a8:	00 00       	nop
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	98 2f       	mov	r25, r24
  b0:	88 27       	eor	r24, r24
  b2:	24 b1       	in	r18, 0x04	; 4
  b4:	82 0f       	add	r24, r18
  b6:	91 1d       	adc	r25, r1
  b8:	08 95       	ret

000000ba <UART_init>:
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	88 61       	ori	r24, 0x18	; 24
  be:	8a b9       	out	0x0a, r24	; 10
  c0:	80 b5       	in	r24, 0x20	; 32
  c2:	86 68       	ori	r24, 0x86	; 134
  c4:	80 bd       	out	0x20, r24	; 32
  c6:	83 e3       	ldi	r24, 0x33	; 51
  c8:	89 b9       	out	0x09, r24	; 9
  ca:	10 bc       	out	0x20, r1	; 32
  cc:	08 95       	ret

000000ce <UART_TX>:
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <UART_TX>
  d2:	8c b9       	out	0x0c, r24	; 12
  d4:	08 95       	ret

000000d6 <UART_SendString>:
void UART_SendString(uint8_t *s){
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	ec 01       	movw	r28, r24
	while(*s !='\0'){
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <UART_SendString+0xe>
		UART_TX(*s);
  de:	0e 94 67 00 	call	0xce	; 0xce <UART_TX>
		s++;
  e2:	21 96       	adiw	r28, 0x01	; 1
uint8_t UART_RX(){
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
	return(UDR);			/* Return the byte*/
}
void UART_SendString(uint8_t *s){
	while(*s !='\0'){
  e4:	88 81       	ld	r24, Y
  e6:	81 11       	cpse	r24, r1
  e8:	fa cf       	rjmp	.-12     	; 0xde <UART_SendString+0x8>
		UART_TX(*s);
		s++;
	}
}
  ea:	df 91       	pop	r29
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <main>:


int main(void)
{
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	00 d0       	rcall	.+0      	; 0xf6 <main+0x6>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0x8>
  f8:	1f 92       	push	r1
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
    uint8_t string[5];
    uint16_t adc_value;
	
	ADC_init();
  fe:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	UART_init();
 102:	0e 94 5d 00 	call	0xba	; 0xba <UART_init>
	
	UART_SendString("\n\tADC Value");
 106:	80 e6       	ldi	r24, 0x60	; 96
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_SendString>
    while (1) 
    {
		adc_value = ADC_read();
 10e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_read>
		itoa(adc_value,string,10);
 112:	4a e0       	ldi	r20, 0x0A	; 10
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	be 01       	movw	r22, r28
 118:	6f 5f       	subi	r22, 0xFF	; 255
 11a:	7f 4f       	sbci	r23, 0xFF	; 255
 11c:	0e 94 a6 00 	call	0x14c	; 0x14c <itoa>
		UART_SendString(string);
 120:	ce 01       	movw	r24, r28
 122:	01 96       	adiw	r24, 0x01	; 1
 124:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_SendString>
		UART_SendString("\r");
 128:	8c e6       	ldi	r24, 0x6C	; 108
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_SendString>
		UART_SendString("\n");
 130:	8e e6       	ldi	r24, 0x6E	; 110
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 6b 00 	call	0xd6	; 0xd6 <UART_SendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	2f e3       	ldi	r18, 0x3F	; 63
 13a:	8d e0       	ldi	r24, 0x0D	; 13
 13c:	93 e0       	ldi	r25, 0x03	; 3
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x4e>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x58>
 148:	00 00       	nop
 14a:	e1 cf       	rjmp	.-62     	; 0x10e <main+0x1e>

0000014c <itoa>:
 14c:	45 32       	cpi	r20, 0x25	; 37
 14e:	51 05       	cpc	r21, r1
 150:	20 f4       	brcc	.+8      	; 0x15a <itoa+0xe>
 152:	42 30       	cpi	r20, 0x02	; 2
 154:	10 f0       	brcs	.+4      	; 0x15a <itoa+0xe>
 156:	0c 94 b1 00 	jmp	0x162	; 0x162 <__itoa_ncheck>
 15a:	fb 01       	movw	r30, r22
 15c:	10 82       	st	Z, r1
 15e:	cb 01       	movw	r24, r22
 160:	08 95       	ret

00000162 <__itoa_ncheck>:
 162:	bb 27       	eor	r27, r27
 164:	4a 30       	cpi	r20, 0x0A	; 10
 166:	31 f4       	brne	.+12     	; 0x174 <__itoa_ncheck+0x12>
 168:	99 23       	and	r25, r25
 16a:	22 f4       	brpl	.+8      	; 0x174 <__itoa_ncheck+0x12>
 16c:	bd e2       	ldi	r27, 0x2D	; 45
 16e:	90 95       	com	r25
 170:	81 95       	neg	r24
 172:	9f 4f       	sbci	r25, 0xFF	; 255
 174:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__utoa_common>

00000178 <__utoa_ncheck>:
 178:	bb 27       	eor	r27, r27

0000017a <__utoa_common>:
 17a:	fb 01       	movw	r30, r22
 17c:	55 27       	eor	r21, r21
 17e:	aa 27       	eor	r26, r26
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	aa 1f       	adc	r26, r26
 186:	a4 17       	cp	r26, r20
 188:	10 f0       	brcs	.+4      	; 0x18e <__utoa_common+0x14>
 18a:	a4 1b       	sub	r26, r20
 18c:	83 95       	inc	r24
 18e:	50 51       	subi	r21, 0x10	; 16
 190:	b9 f7       	brne	.-18     	; 0x180 <__utoa_common+0x6>
 192:	a0 5d       	subi	r26, 0xD0	; 208
 194:	aa 33       	cpi	r26, 0x3A	; 58
 196:	08 f0       	brcs	.+2      	; 0x19a <__utoa_common+0x20>
 198:	a9 5d       	subi	r26, 0xD9	; 217
 19a:	a1 93       	st	Z+, r26
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	79 f7       	brne	.-34     	; 0x17e <__utoa_common+0x4>
 1a0:	b1 11       	cpse	r27, r1
 1a2:	b1 93       	st	Z+, r27
 1a4:	11 92       	st	Z+, r1
 1a6:	cb 01       	movw	r24, r22
 1a8:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <strrev>

000001ac <strrev>:
 1ac:	dc 01       	movw	r26, r24
 1ae:	fc 01       	movw	r30, r24
 1b0:	67 2f       	mov	r22, r23
 1b2:	71 91       	ld	r23, Z+
 1b4:	77 23       	and	r23, r23
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <strrev+0x4>
 1b8:	32 97       	sbiw	r30, 0x02	; 2
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <strrev+0x18>
 1bc:	7c 91       	ld	r23, X
 1be:	6d 93       	st	X+, r22
 1c0:	70 83       	st	Z, r23
 1c2:	62 91       	ld	r22, -Z
 1c4:	ae 17       	cp	r26, r30
 1c6:	bf 07       	cpc	r27, r31
 1c8:	c8 f3       	brcs	.-14     	; 0x1bc <strrev+0x10>
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
